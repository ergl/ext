%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.1
%% Version source: git
-module(ext_client_proto).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'client.Load'() ::
      #{startKey                => non_neg_integer(), % = 1, optional, 64 bits
        keyLimit                => non_neg_integer(), % = 2, optional, 64 bits
        value                   => iodata()         % = 3, optional
       }.

-type 'client.LoadReply'() ::
      #{
       }.

-type 'client.Read'() ::
      #{prevLeader              => unicode:chardata(), % = 1, optional
        txId                    => unicode:chardata(), % = 2, optional
        timestamp               => non_neg_integer(), % = 3, optional, 64 bits
        key                     => iodata()         % = 4, optional
       }.

-type 'client.ReadReply'() ::
      #{ballot                  => non_neg_integer(), % = 1, optional, 32 bits
        servedBy                => unicode:chardata(), % = 2, optional
        isError                 => boolean() | 0 | 1, % = 3, optional
        data                    => iodata()         % = 4, optional
       }.

-type 'client.Update'() ::
      #{prevLeader              => unicode:chardata(), % = 1, optional
        txId                    => unicode:chardata(), % = 2, optional
        timestamp               => non_neg_integer(), % = 3, optional, 64 bits
        key                     => iodata(),        % = 4, optional
        data                    => iodata()         % = 5, optional
       }.

-type 'client.UpdateReply'() ::
      #{ballot                  => non_neg_integer(), % = 1, optional, 32 bits
        servedBy                => unicode:chardata(), % = 2, optional
        isError                 => boolean() | 0 | 1 % = 3, optional
       }.

-type 'client.Commit'() ::
      #{txId                    => unicode:chardata(), % = 1, optional
        ballots                 => #{non_neg_integer() => non_neg_integer()} % = 2
       }.

-type 'client.CommitReply'() ::
      #{commit                  => boolean() | 0 | 1 % = 1, optional
       }.

-type 'client.Release'() ::
      #{txId                    => unicode:chardata(), % = 1, optional
        prevLeader              => unicode:chardata() % = 2, optional
       }.

-type 'client.ClientPing'() ::
      #{txId                    => unicode:chardata() % = 1, optional
       }.

-type 'client.ClientPong'() ::
      #{
       }.

-type 'client.Request'() ::
      #{seq                     => non_neg_integer(), % = 1, optional, 32 bits
        payload                 => {read, 'client.Read'()} | {update, 'client.Update'()} | {commit, 'client.Commit'()} | {release, 'client.Release'()} | {load, 'client.Load'()} | {ping, 'client.ClientPing'()} % oneof
       }.

-type 'client.Response'() ::
      #{seq                     => non_neg_integer(), % = 1, optional, 32 bits
        payload                 => {read, 'client.ReadReply'()} | {update, 'client.UpdateReply'()} | {commit, 'client.CommitReply'()} | {load, 'client.LoadReply'()} | {pong, 'client.ClientPong'()} % oneof
       }.

-export_type(['client.Load'/0, 'client.LoadReply'/0, 'client.Read'/0, 'client.ReadReply'/0, 'client.Update'/0, 'client.UpdateReply'/0, 'client.Commit'/0, 'client.CommitReply'/0, 'client.Release'/0, 'client.ClientPing'/0, 'client.ClientPong'/0, 'client.Request'/0, 'client.Response'/0]).
-type '$msg_name'() :: 'client.Load' | 'client.LoadReply' | 'client.Read' | 'client.ReadReply' | 'client.Update' | 'client.UpdateReply' | 'client.Commit' | 'client.CommitReply' | 'client.Release' | 'client.ClientPing' | 'client.ClientPong' | 'client.Request' | 'client.Response'.
-type '$msg'() :: 'client.Load'() | 'client.LoadReply'() | 'client.Read'() | 'client.ReadReply'() | 'client.Update'() | 'client.UpdateReply'() | 'client.Commit'() | 'client.CommitReply'() | 'client.Release'() | 'client.ClientPing'() | 'client.ClientPong'() | 'client.Request'() | 'client.Response'().
-export_type(['$msg_name'/0, '$msg'/0]).

-dialyzer({no_underspecs, encode_msg/2}).
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-dialyzer({no_underspecs, encode_msg/3}).
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'client.Load' -> 'encode_msg_client.Load'(id(Msg, TrUserData), TrUserData);
        'client.LoadReply' -> 'encode_msg_client.LoadReply'(id(Msg, TrUserData), TrUserData);
        'client.Read' -> 'encode_msg_client.Read'(id(Msg, TrUserData), TrUserData);
        'client.ReadReply' -> 'encode_msg_client.ReadReply'(id(Msg, TrUserData), TrUserData);
        'client.Update' -> 'encode_msg_client.Update'(id(Msg, TrUserData), TrUserData);
        'client.UpdateReply' -> 'encode_msg_client.UpdateReply'(id(Msg, TrUserData), TrUserData);
        'client.Commit' -> 'encode_msg_client.Commit'(id(Msg, TrUserData), TrUserData);
        'client.CommitReply' -> 'encode_msg_client.CommitReply'(id(Msg, TrUserData), TrUserData);
        'client.Release' -> 'encode_msg_client.Release'(id(Msg, TrUserData), TrUserData);
        'client.ClientPing' -> 'encode_msg_client.ClientPing'(id(Msg, TrUserData), TrUserData);
        'client.ClientPong' -> 'encode_msg_client.ClientPong'(id(Msg, TrUserData), TrUserData);
        'client.Request' -> 'encode_msg_client.Request'(id(Msg, TrUserData), TrUserData);
        'client.Response' -> 'encode_msg_client.Response'(id(Msg, TrUserData), TrUserData)
    end.


'encode_msg_client.Load'(Msg, TrUserData) -> 'encode_msg_client.Load'(Msg, <<>>, TrUserData).


'encode_msg_client.Load'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{startKey := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{keyLimit := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{value := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

'encode_msg_client.LoadReply'(_Msg, _TrUserData) -> <<>>.

'encode_msg_client.Read'(Msg, TrUserData) -> 'encode_msg_client.Read'(Msg, <<>>, TrUserData).


'encode_msg_client.Read'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{prevLeader := F1} -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end;
             _ -> Bin
         end,
    B2 = case M of
             #{txId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{timestamp := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{key := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

'encode_msg_client.ReadReply'(Msg, TrUserData) -> 'encode_msg_client.ReadReply'(Msg, <<>>, TrUserData).


'encode_msg_client.ReadReply'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{ballot := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{servedBy := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{isError := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= false -> B2;
                        true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{data := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

'encode_msg_client.Update'(Msg, TrUserData) -> 'encode_msg_client.Update'(Msg, <<>>, TrUserData).


'encode_msg_client.Update'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{prevLeader := F1} -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end;
             _ -> Bin
         end,
    B2 = case M of
             #{txId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{timestamp := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{key := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case iolist_size(TrF4) of
                         0 -> B3;
                         _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{data := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                case iolist_size(TrF5) of
                    0 -> B4;
                    _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

'encode_msg_client.UpdateReply'(Msg, TrUserData) -> 'encode_msg_client.UpdateReply'(Msg, <<>>, TrUserData).


'encode_msg_client.UpdateReply'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{ballot := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{servedBy := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{isError := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= false -> B2;
                   true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

'encode_msg_client.Commit'(Msg, TrUserData) -> 'encode_msg_client.Commit'(Msg, <<>>, TrUserData).


'encode_msg_client.Commit'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{txId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{ballots := F2} ->
            TrF2 = 'tr_encode_client.Commit.ballots'(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> 'e_field_client.Commit_ballots'(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

'encode_msg_client.CommitReply'(Msg, TrUserData) -> 'encode_msg_client.CommitReply'(Msg, <<>>, TrUserData).


'encode_msg_client.CommitReply'(#{} = M, Bin, TrUserData) ->
    case M of
        #{commit := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

'encode_msg_client.Release'(Msg, TrUserData) -> 'encode_msg_client.Release'(Msg, <<>>, TrUserData).


'encode_msg_client.Release'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{txId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{prevLeader := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

'encode_msg_client.ClientPing'(Msg, TrUserData) -> 'encode_msg_client.ClientPing'(Msg, <<>>, TrUserData).


'encode_msg_client.ClientPing'(#{} = M, Bin, TrUserData) ->
    case M of
        #{txId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

'encode_msg_client.ClientPong'(_Msg, _TrUserData) -> <<>>.

'encode_msg_client.Request'(Msg, TrUserData) -> 'encode_msg_client.Request'(Msg, <<>>, TrUserData).


'encode_msg_client.Request'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{seq := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{payload := F2} ->
            case id(F2, TrUserData) of
                {read, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_read'(TrTF2, <<B1/binary, 18>>, TrUserData) end;
                {update, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_update'(TrTF2, <<B1/binary, 26>>, TrUserData) end;
                {commit, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_commit'(TrTF2, <<B1/binary, 34>>, TrUserData) end;
                {release, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_release'(TrTF2, <<B1/binary, 42>>, TrUserData) end;
                {load, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_load'(TrTF2, <<B1/binary, 50>>, TrUserData) end;
                {ping, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Request_ping'(TrTF2, <<B1/binary, 58>>, TrUserData) end
            end;
        _ -> B1
    end.

'encode_msg_client.Response'(Msg, TrUserData) -> 'encode_msg_client.Response'(Msg, <<>>, TrUserData).


'encode_msg_client.Response'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{seq := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{payload := F2} ->
            case id(F2, TrUserData) of
                {read, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Response_read'(TrTF2, <<B1/binary, 18>>, TrUserData) end;
                {update, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Response_update'(TrTF2, <<B1/binary, 26>>, TrUserData) end;
                {commit, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Response_commit'(TrTF2, <<B1/binary, 34>>, TrUserData) end;
                {load, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Response_load'(TrTF2, <<B1/binary, 42>>, TrUserData) end;
                {pong, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_client.Response_pong'(TrTF2, <<B1/binary, 50>>, TrUserData) end
            end;
        _ -> B1
    end.

'e_mfield_client.Commit_ballots'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<uint32,uint32>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_client.Commit_ballots'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_client.Commit_ballots'('tr_encode_client.Commit.ballots[x]'(Elem, TrUserData), Bin2, TrUserData),
    'e_field_client.Commit_ballots'(Rest, Bin3, TrUserData);
'e_field_client.Commit_ballots'([], Bin, _TrUserData) -> Bin.

'e_mfield_client.Request_read'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.Read'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Request_update'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.Update'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Request_commit'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.Commit'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Request_release'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.Release'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Request_load'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.Load'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Request_ping'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.ClientPing'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Response_read'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.ReadReply'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Response_update'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.UpdateReply'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Response_commit'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_client.CommitReply'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_client.Response_load'(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

'e_mfield_client.Response_pong'(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

'encode_msg_map<uint32,uint32>'(#{key := F1, value := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('client.Load', Bin, TrUserData) -> id('decode_msg_client.Load'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.LoadReply', Bin, TrUserData) -> id('decode_msg_client.LoadReply'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Read', Bin, TrUserData) -> id('decode_msg_client.Read'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.ReadReply', Bin, TrUserData) -> id('decode_msg_client.ReadReply'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Update', Bin, TrUserData) -> id('decode_msg_client.Update'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.UpdateReply', Bin, TrUserData) -> id('decode_msg_client.UpdateReply'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Commit', Bin, TrUserData) -> id('decode_msg_client.Commit'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.CommitReply', Bin, TrUserData) -> id('decode_msg_client.CommitReply'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Release', Bin, TrUserData) -> id('decode_msg_client.Release'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.ClientPing', Bin, TrUserData) -> id('decode_msg_client.ClientPing'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.ClientPong', Bin, TrUserData) -> id('decode_msg_client.ClientPong'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Request', Bin, TrUserData) -> id('decode_msg_client.Request'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('client.Response', Bin, TrUserData) -> id('decode_msg_client.Response'(Bin, TrUserData), TrUserData).



'decode_msg_client.Load'(Bin, TrUserData) -> 'dfp_read_field_def_client.Load'(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.Load'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.Load_startKey'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.Load'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.Load_keyLimit'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.Load'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.Load_value'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.Load'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{startKey => F@_1, keyLimit => F@_2, value => F@_3};
'dfp_read_field_def_client.Load'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_client.Load'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_client.Load'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Load'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_client.Load'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.Load_startKey'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_client.Load_keyLimit'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_client.Load_value'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Load'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_client.Load'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_client.Load'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_client.Load'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_client.Load'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_client.Load'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{startKey => F@_1, keyLimit => F@_2, value => F@_3}.

'd_field_client.Load_startKey'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.Load_startKey'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.Load_startKey'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    'dfp_read_field_def_client.Load'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_client.Load_keyLimit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.Load_keyLimit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.Load_keyLimit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    'dfp_read_field_def_client.Load'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_client.Load_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.Load_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.Load_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Load'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_client.Load'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_client.Load'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_client.Load'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.Load'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_client.Load'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_client.Load'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_client.Load'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Load'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_client.Load'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Load'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_client.Load'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.Load'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_client.Load'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.Load'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_client.LoadReply'(Bin, TrUserData) -> 'dfp_read_field_def_client.LoadReply'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_client.LoadReply'(<<>>, 0, 0, _, _) -> #{};
'dfp_read_field_def_client.LoadReply'(Other, Z1, Z2, F, TrUserData) -> 'dg_read_field_def_client.LoadReply'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_client.LoadReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.LoadReply'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_client.LoadReply'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_client.LoadReply'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_client.LoadReply'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_client.LoadReply'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_client.LoadReply'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_client.LoadReply'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_client.LoadReply'(<<>>, 0, 0, _, _) -> #{}.

'skip_varint_client.LoadReply'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'skip_varint_client.LoadReply'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_client.LoadReply'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.LoadReply'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_client.LoadReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> 'skip_length_delimited_client.LoadReply'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_client.LoadReply'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.LoadReply'(Rest2, 0, 0, F, TrUserData).

'skip_group_client.LoadReply'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.LoadReply'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_client.LoadReply'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.LoadReply'(Rest, Z1, Z2, F, TrUserData).

'skip_64_client.LoadReply'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.LoadReply'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_client.Read'(Bin, TrUserData) -> 'dfp_read_field_def_client.Read'(Bin, 0, 0, 0, id('$undef', TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.Read'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.Read_prevLeader'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.Read'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.Read_txId'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.Read'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.Read_timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.Read'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.Read_key'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.Read'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{txId => F@_2, timestamp => F@_3, key => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{prevLeader => F@_1}
    end;
'dfp_read_field_def_client.Read'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_client.Read'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_client.Read'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Read'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_client.Read'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_client.Read_prevLeader'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> 'd_field_client.Read_txId'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> 'd_field_client.Read_timestamp'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> 'd_field_client.Read_key'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Read'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_client.Read'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_client.Read'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_client.Read'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_client.Read'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_client.Read'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{txId => F@_2, timestamp => F@_3, key => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{prevLeader => F@_1}
    end.

'd_field_client.Read_prevLeader'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.Read_prevLeader'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.Read_prevLeader'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Read'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_client.Read_txId'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.Read_txId'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.Read_txId'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Read'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_client.Read_timestamp'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.Read_timestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.Read_timestamp'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    'dfp_read_field_def_client.Read'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_client.Read_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.Read_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.Read_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Read'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_client.Read'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_client.Read'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_client.Read'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.Read'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_client.Read'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'skip_length_delimited_client.Read'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_client.Read'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Read'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_client.Read'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Read'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_client.Read'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.Read'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_client.Read'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.Read'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_client.ReadReply'(Bin, TrUserData) -> 'dfp_read_field_def_client.ReadReply'(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.ReadReply'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.ReadReply_ballot'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.ReadReply'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.ReadReply_servedBy'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.ReadReply'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.ReadReply_isError'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.ReadReply'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_client.ReadReply_data'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_client.ReadReply'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{ballot => F@_1, servedBy => F@_2, isError => F@_3, data => F@_4};
'dfp_read_field_def_client.ReadReply'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_client.ReadReply'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_client.ReadReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.ReadReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_client.ReadReply'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.ReadReply_ballot'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> 'd_field_client.ReadReply_servedBy'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> 'd_field_client.ReadReply_isError'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> 'd_field_client.ReadReply_data'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.ReadReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_client.ReadReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_client.ReadReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_client.ReadReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_client.ReadReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_client.ReadReply'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{ballot => F@_1, servedBy => F@_2, isError => F@_3, data => F@_4}.

'd_field_client.ReadReply_ballot'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.ReadReply_ballot'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.ReadReply_ballot'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_client.ReadReply'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_client.ReadReply_servedBy'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.ReadReply_servedBy'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.ReadReply_servedBy'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.ReadReply'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_client.ReadReply_isError'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.ReadReply_isError'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.ReadReply_isError'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_client.ReadReply'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_client.ReadReply_data'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_client.ReadReply_data'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_client.ReadReply_data'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.ReadReply'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_client.ReadReply'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_client.ReadReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_client.ReadReply'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.ReadReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_client.ReadReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'skip_length_delimited_client.ReadReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_client.ReadReply'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.ReadReply'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_client.ReadReply'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.ReadReply'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_client.ReadReply'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.ReadReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_client.ReadReply'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_client.ReadReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_client.Update'(Bin, TrUserData) -> 'dfp_read_field_def_client.Update'(Bin, 0, 0, 0, id('$undef', TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.Update'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_client.Update_prevLeader'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_client.Update'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_client.Update_txId'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_client.Update'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_client.Update_timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_client.Update'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_client.Update_key'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_client.Update'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_client.Update_data'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_client.Update'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{txId => F@_2, timestamp => F@_3, key => F@_4, data => F@_5},
    if F@_1 == '$undef' -> S1;
       true -> S1#{prevLeader => F@_1}
    end;
'dfp_read_field_def_client.Update'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_client.Update'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_client.Update'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Update'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_client.Update'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_client.Update_prevLeader'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> 'd_field_client.Update_txId'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> 'd_field_client.Update_timestamp'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> 'd_field_client.Update_key'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> 'd_field_client.Update_data'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Update'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_client.Update'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_client.Update'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_client.Update'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_client.Update'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_client.Update'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{txId => F@_2, timestamp => F@_3, key => F@_4, data => F@_5},
    if F@_1 == '$undef' -> S1;
       true -> S1#{prevLeader => F@_1}
    end.

'd_field_client.Update_prevLeader'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_client.Update_prevLeader'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_client.Update_prevLeader'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Update'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_field_client.Update_txId'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_client.Update_txId'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_client.Update_txId'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Update'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_client.Update_timestamp'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_client.Update_timestamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_client.Update_timestamp'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    'dfp_read_field_def_client.Update'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_client.Update_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_client.Update_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_client.Update_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Update'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_client.Update_data'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_client.Update_data'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_client.Update_data'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Update'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_client.Update'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_client.Update'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_client.Update'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_client.Update'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_client.Update'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'skip_length_delimited_client.Update'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_client.Update'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Update'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_client.Update'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Update'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_client.Update'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_client.Update'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_client.Update'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_client.Update'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_client.UpdateReply'(Bin, TrUserData) -> 'dfp_read_field_def_client.UpdateReply'(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), TrUserData).

'dfp_read_field_def_client.UpdateReply'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.UpdateReply_ballot'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.UpdateReply'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.UpdateReply_servedBy'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.UpdateReply'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_client.UpdateReply_isError'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_client.UpdateReply'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{ballot => F@_1, servedBy => F@_2, isError => F@_3};
'dfp_read_field_def_client.UpdateReply'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_client.UpdateReply'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_client.UpdateReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.UpdateReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_client.UpdateReply'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.UpdateReply_ballot'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_client.UpdateReply_servedBy'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> 'd_field_client.UpdateReply_isError'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.UpdateReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_client.UpdateReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_client.UpdateReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_client.UpdateReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_client.UpdateReply'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_client.UpdateReply'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{ballot => F@_1, servedBy => F@_2, isError => F@_3}.

'd_field_client.UpdateReply_ballot'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.UpdateReply_ballot'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.UpdateReply_ballot'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_client.UpdateReply'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_client.UpdateReply_servedBy'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.UpdateReply_servedBy'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.UpdateReply_servedBy'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.UpdateReply'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_client.UpdateReply_isError'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_client.UpdateReply_isError'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_client.UpdateReply_isError'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_client.UpdateReply'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_client.UpdateReply'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_client.UpdateReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_client.UpdateReply'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.UpdateReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_client.UpdateReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_client.UpdateReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_client.UpdateReply'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.UpdateReply'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_client.UpdateReply'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.UpdateReply'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_client.UpdateReply'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.UpdateReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_client.UpdateReply'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_client.UpdateReply'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_client.Commit'(Bin, TrUserData) -> 'dfp_read_field_def_client.Commit'(Bin, 0, 0, 0, id(<<>>, TrUserData), 'tr_decode_init_default_client.Commit.ballots'([], TrUserData), TrUserData).

'dfp_read_field_def_client.Commit'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Commit_txId'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Commit'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Commit_ballots'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Commit'(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{txId => F@_1, ballots => 'tr_decode_repeated_finalize_client.Commit.ballots'(R1, TrUserData)};
'dfp_read_field_def_client.Commit'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_client.Commit'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_client.Commit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Commit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_client.Commit'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_client.Commit_txId'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_client.Commit_ballots'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Commit'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_client.Commit'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_client.Commit'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_client.Commit'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_client.Commit'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_client.Commit'(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{txId => F@_1, ballots => 'tr_decode_repeated_finalize_client.Commit.ballots'(R1, TrUserData)}.

'd_field_client.Commit_txId'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Commit_txId'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Commit_txId'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Commit'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_client.Commit_ballots'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Commit_ballots'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Commit_ballots'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<uint32,uint32>'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Commit'(RestF, 0, 0, F, F@_1, 'tr_decode_repeated_add_elem_client.Commit.ballots'(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_client.Commit'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_client.Commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_client.Commit'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_client.Commit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_client.Commit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_client.Commit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Commit'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_client.Commit'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Commit'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_client.Commit'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_client.Commit'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_client.CommitReply'(Bin, TrUserData) -> 'dfp_read_field_def_client.CommitReply'(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

'dfp_read_field_def_client.CommitReply'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_client.CommitReply_commit'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_client.CommitReply'(<<>>, 0, 0, _, F@_1, _) -> #{commit => F@_1};
'dfp_read_field_def_client.CommitReply'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_client.CommitReply'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_client.CommitReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.CommitReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_client.CommitReply'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.CommitReply_commit'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.CommitReply'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_client.CommitReply'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_client.CommitReply'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_client.CommitReply'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_client.CommitReply'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_client.CommitReply'(<<>>, 0, 0, _, F@_1, _) -> #{commit => F@_1}.

'd_field_client.CommitReply_commit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_client.CommitReply_commit'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_client.CommitReply_commit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_client.CommitReply'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_client.CommitReply'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_client.CommitReply'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_client.CommitReply'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.CommitReply'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_client.CommitReply'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_client.CommitReply'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_client.CommitReply'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.CommitReply'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_client.CommitReply'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.CommitReply'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_client.CommitReply'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.CommitReply'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_client.CommitReply'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.CommitReply'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_client.Release'(Bin, TrUserData) -> 'dfp_read_field_def_client.Release'(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.Release'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Release_txId'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Release'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Release_prevLeader'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Release'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{txId => F@_1, prevLeader => F@_2};
'dfp_read_field_def_client.Release'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_client.Release'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_client.Release'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Release'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_client.Release'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_client.Release_txId'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_client.Release_prevLeader'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Release'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_client.Release'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_client.Release'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_client.Release'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_client.Release'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_client.Release'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{txId => F@_1, prevLeader => F@_2}.

'd_field_client.Release_txId'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Release_txId'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Release_txId'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Release'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_client.Release_prevLeader'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Release_prevLeader'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Release_prevLeader'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.Release'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_client.Release'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_client.Release'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_client.Release'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Release'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_client.Release'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_client.Release'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_client.Release'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Release'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_client.Release'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Release'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_client.Release'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Release'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_client.Release'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Release'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_client.ClientPing'(Bin, TrUserData) -> 'dfp_read_field_def_client.ClientPing'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_client.ClientPing'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_client.ClientPing_txId'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_client.ClientPing'(<<>>, 0, 0, _, F@_1, _) -> #{txId => F@_1};
'dfp_read_field_def_client.ClientPing'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_client.ClientPing'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_client.ClientPing'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.ClientPing'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_client.ClientPing'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_client.ClientPing_txId'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.ClientPing'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_client.ClientPing'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_client.ClientPing'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_client.ClientPing'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_client.ClientPing'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_client.ClientPing'(<<>>, 0, 0, _, F@_1, _) -> #{txId => F@_1}.

'd_field_client.ClientPing_txId'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_client.ClientPing_txId'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_client.ClientPing_txId'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_client.ClientPing'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_client.ClientPing'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_client.ClientPing'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_client.ClientPing'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.ClientPing'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_client.ClientPing'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_client.ClientPing'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_client.ClientPing'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.ClientPing'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_client.ClientPing'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.ClientPing'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_client.ClientPing'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.ClientPing'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_client.ClientPing'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_client.ClientPing'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_client.ClientPong'(Bin, TrUserData) -> 'dfp_read_field_def_client.ClientPong'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_client.ClientPong'(<<>>, 0, 0, _, _) -> #{};
'dfp_read_field_def_client.ClientPong'(Other, Z1, Z2, F, TrUserData) -> 'dg_read_field_def_client.ClientPong'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_client.ClientPong'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.ClientPong'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_client.ClientPong'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_client.ClientPong'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_client.ClientPong'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_client.ClientPong'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_client.ClientPong'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_client.ClientPong'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_client.ClientPong'(<<>>, 0, 0, _, _) -> #{}.

'skip_varint_client.ClientPong'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'skip_varint_client.ClientPong'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_client.ClientPong'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.ClientPong'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_client.ClientPong'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> 'skip_length_delimited_client.ClientPong'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_client.ClientPong'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.ClientPong'(Rest2, 0, 0, F, TrUserData).

'skip_group_client.ClientPong'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.ClientPong'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_client.ClientPong'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.ClientPong'(Rest, Z1, Z2, F, TrUserData).

'skip_64_client.ClientPong'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_client.ClientPong'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_client.Request'(Bin, TrUserData) -> 'dfp_read_field_def_client.Request'(Bin, 0, 0, 0, id(0, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_client.Request'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_seq'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_read'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_update'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_release'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_load'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Request_ping'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Request'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{seq => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end;
'dfp_read_field_def_client.Request'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_client.Request'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_client.Request'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Request'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_client.Request'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.Request_seq'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_client.Request_read'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        26 -> 'd_field_client.Request_update'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        34 -> 'd_field_client.Request_commit'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        42 -> 'd_field_client.Request_release'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        50 -> 'd_field_client.Request_load'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        58 -> 'd_field_client.Request_ping'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Request'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_client.Request'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_client.Request'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_client.Request'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_client.Request'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_client.Request'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{seq => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end.

'd_field_client.Request_seq'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_seq'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_seq'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_client.Request'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_client.Request_read'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_read'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_read'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.Read'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({read, NewFValue}, TrUserData);
                                            {read, MVPrev} -> id({read, 'merge_msg_client.Read'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({read, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'd_field_client.Request_update'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_update'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_update'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.Update'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({update, NewFValue}, TrUserData);
                                            {update, MVPrev} -> id({update, 'merge_msg_client.Update'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({update, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'd_field_client.Request_commit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_commit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_commit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.Commit'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({commit, NewFValue}, TrUserData);
                                            {commit, MVPrev} -> id({commit, 'merge_msg_client.Commit'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({commit, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'd_field_client.Request_release'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_release'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_release'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.Release'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({release, NewFValue}, TrUserData);
                                            {release, MVPrev} -> id({release, 'merge_msg_client.Release'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({release, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'd_field_client.Request_load'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_load'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_load'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.Load'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({load, NewFValue}, TrUserData);
                                            {load, MVPrev} -> id({load, 'merge_msg_client.Load'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({load, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'd_field_client.Request_ping'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Request_ping'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Request_ping'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.ClientPing'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Request'(RestF,
                                        0,
                                        0,
                                        F,
                                        F@_1,
                                        case Prev of
                                            '$undef' -> id({ping, NewFValue}, TrUserData);
                                            {ping, MVPrev} -> id({ping, 'merge_msg_client.ClientPing'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                            _ -> id({ping, NewFValue}, TrUserData)
                                        end,
                                        TrUserData).

'skip_varint_client.Request'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_client.Request'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_client.Request'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Request'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_client.Request'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_client.Request'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_client.Request'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Request'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_client.Request'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Request'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_client.Request'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Request'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_client.Request'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Request'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_client.Response'(Bin, TrUserData) -> 'dfp_read_field_def_client.Response'(Bin, 0, 0, 0, id(0, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_client.Response'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_seq'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_read'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_update'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_commit'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_load'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_client.Response_pong'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_client.Response'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{seq => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end;
'dfp_read_field_def_client.Response'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_client.Response'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_client.Response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_client.Response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_client.Response'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_client.Response_seq'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_client.Response_read'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        26 -> 'd_field_client.Response_update'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        34 -> 'd_field_client.Response_commit'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        42 -> 'd_field_client.Response_load'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        50 -> 'd_field_client.Response_pong'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_client.Response'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_client.Response'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_client.Response'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_client.Response'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_client.Response'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_client.Response'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{seq => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end.

'd_field_client.Response_seq'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_seq'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_seq'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_client.Response'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_client.Response_read'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_read'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_read'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.ReadReply'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Response'(RestF,
                                         0,
                                         0,
                                         F,
                                         F@_1,
                                         case Prev of
                                             '$undef' -> id({read, NewFValue}, TrUserData);
                                             {read, MVPrev} -> id({read, 'merge_msg_client.ReadReply'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                             _ -> id({read, NewFValue}, TrUserData)
                                         end,
                                         TrUserData).

'd_field_client.Response_update'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_update'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_update'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.UpdateReply'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Response'(RestF,
                                         0,
                                         0,
                                         F,
                                         F@_1,
                                         case Prev of
                                             '$undef' -> id({update, NewFValue}, TrUserData);
                                             {update, MVPrev} -> id({update, 'merge_msg_client.UpdateReply'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                             _ -> id({update, NewFValue}, TrUserData)
                                         end,
                                         TrUserData).

'd_field_client.Response_commit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_commit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_commit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.CommitReply'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Response'(RestF,
                                         0,
                                         0,
                                         F,
                                         F@_1,
                                         case Prev of
                                             '$undef' -> id({commit, NewFValue}, TrUserData);
                                             {commit, MVPrev} -> id({commit, 'merge_msg_client.CommitReply'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                             _ -> id({commit, NewFValue}, TrUserData)
                                         end,
                                         TrUserData).

'd_field_client.Response_load'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_load'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_load'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.LoadReply'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Response'(RestF,
                                         0,
                                         0,
                                         F,
                                         F@_1,
                                         case Prev of
                                             '$undef' -> id({load, NewFValue}, TrUserData);
                                             {load, MVPrev} -> id({load, 'merge_msg_client.LoadReply'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                             _ -> id({load, NewFValue}, TrUserData)
                                         end,
                                         TrUserData).

'd_field_client.Response_pong'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_client.Response_pong'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_client.Response_pong'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_client.ClientPong'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_client.Response'(RestF,
                                         0,
                                         0,
                                         F,
                                         F@_1,
                                         case Prev of
                                             '$undef' -> id({pong, NewFValue}, TrUserData);
                                             {pong, MVPrev} -> id({pong, 'merge_msg_client.ClientPong'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                             _ -> id({pong, NewFValue}, TrUserData)
                                         end,
                                         TrUserData).

'skip_varint_client.Response'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_client.Response'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_client.Response'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Response'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_client.Response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_client.Response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_client.Response'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_client.Response'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_client.Response'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_client.Response'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_client.Response'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Response'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_client.Response'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_client.Response'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<uint32,uint32>'(Bin, TrUserData) -> 'dfp_read_field_def_map<uint32,uint32>'(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<uint32,uint32>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,uint32>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint32>'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,uint32>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint32>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<uint32,uint32>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<uint32,uint32>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<uint32,uint32>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<uint32,uint32>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<uint32,uint32>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<uint32,uint32>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_map<uint32,uint32>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<uint32,uint32>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<uint32,uint32>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<uint32,uint32>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<uint32,uint32>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<uint32,uint32>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<uint32,uint32>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{key => F@_1, value => F@_2}.

'd_field_map<uint32,uint32>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,uint32>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint32>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,uint32>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<uint32,uint32>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,uint32>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint32>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,uint32>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<uint32,uint32>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<uint32,uint32>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<uint32,uint32>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint32>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<uint32,uint32>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<uint32,uint32>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<uint32,uint32>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<uint32,uint32>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<uint32,uint32>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<uint32,uint32>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<uint32,uint32>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint32>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<uint32,uint32>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint32>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'client.Load' -> 'merge_msg_client.Load'(Prev, New, TrUserData);
        'client.LoadReply' -> 'merge_msg_client.LoadReply'(Prev, New, TrUserData);
        'client.Read' -> 'merge_msg_client.Read'(Prev, New, TrUserData);
        'client.ReadReply' -> 'merge_msg_client.ReadReply'(Prev, New, TrUserData);
        'client.Update' -> 'merge_msg_client.Update'(Prev, New, TrUserData);
        'client.UpdateReply' -> 'merge_msg_client.UpdateReply'(Prev, New, TrUserData);
        'client.Commit' -> 'merge_msg_client.Commit'(Prev, New, TrUserData);
        'client.CommitReply' -> 'merge_msg_client.CommitReply'(Prev, New, TrUserData);
        'client.Release' -> 'merge_msg_client.Release'(Prev, New, TrUserData);
        'client.ClientPing' -> 'merge_msg_client.ClientPing'(Prev, New, TrUserData);
        'client.ClientPong' -> 'merge_msg_client.ClientPong'(Prev, New, TrUserData);
        'client.Request' -> 'merge_msg_client.Request'(Prev, New, TrUserData);
        'client.Response' -> 'merge_msg_client.Response'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_client.Load'/3}).
'merge_msg_client.Load'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{startKey := NFstartKey}} -> S1#{startKey => NFstartKey};
             {#{startKey := PFstartKey}, _} -> S1#{startKey => PFstartKey};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{keyLimit := NFkeyLimit}} -> S2#{keyLimit => NFkeyLimit};
             {#{keyLimit := PFkeyLimit}, _} -> S2#{keyLimit => PFkeyLimit};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{value := NFvalue}} -> S3#{value => NFvalue};
        {#{value := PFvalue}, _} -> S3#{value => PFvalue};
        _ -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_client.LoadReply'/3}).
'merge_msg_client.LoadReply'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,'merge_msg_client.Read'/3}).
'merge_msg_client.Read'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{prevLeader := NFprevLeader}} -> S1#{prevLeader => NFprevLeader};
             {#{prevLeader := PFprevLeader}, _} -> S1#{prevLeader => PFprevLeader};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{txId := NFtxId}} -> S2#{txId => NFtxId};
             {#{txId := PFtxId}, _} -> S2#{txId => PFtxId};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{timestamp := NFtimestamp}} -> S3#{timestamp => NFtimestamp};
             {#{timestamp := PFtimestamp}, _} -> S3#{timestamp => PFtimestamp};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{key := NFkey}} -> S4#{key => NFkey};
        {#{key := PFkey}, _} -> S4#{key => PFkey};
        _ -> S4
    end.

-compile({nowarn_unused_function,'merge_msg_client.ReadReply'/3}).
'merge_msg_client.ReadReply'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{ballot := NFballot}} -> S1#{ballot => NFballot};
             {#{ballot := PFballot}, _} -> S1#{ballot => PFballot};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{servedBy := NFservedBy}} -> S2#{servedBy => NFservedBy};
             {#{servedBy := PFservedBy}, _} -> S2#{servedBy => PFservedBy};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{isError := NFisError}} -> S3#{isError => NFisError};
             {#{isError := PFisError}, _} -> S3#{isError => PFisError};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S4#{data => NFdata};
        {#{data := PFdata}, _} -> S4#{data => PFdata};
        _ -> S4
    end.

-compile({nowarn_unused_function,'merge_msg_client.Update'/3}).
'merge_msg_client.Update'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{prevLeader := NFprevLeader}} -> S1#{prevLeader => NFprevLeader};
             {#{prevLeader := PFprevLeader}, _} -> S1#{prevLeader => PFprevLeader};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{txId := NFtxId}} -> S2#{txId => NFtxId};
             {#{txId := PFtxId}, _} -> S2#{txId => PFtxId};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{timestamp := NFtimestamp}} -> S3#{timestamp => NFtimestamp};
             {#{timestamp := PFtimestamp}, _} -> S3#{timestamp => PFtimestamp};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{key := NFkey}} -> S4#{key => NFkey};
             {#{key := PFkey}, _} -> S4#{key => PFkey};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S5#{data => NFdata};
        {#{data := PFdata}, _} -> S5#{data => PFdata};
        _ -> S5
    end.

-compile({nowarn_unused_function,'merge_msg_client.UpdateReply'/3}).
'merge_msg_client.UpdateReply'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{ballot := NFballot}} -> S1#{ballot => NFballot};
             {#{ballot := PFballot}, _} -> S1#{ballot => PFballot};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{servedBy := NFservedBy}} -> S2#{servedBy => NFservedBy};
             {#{servedBy := PFservedBy}, _} -> S2#{servedBy => PFservedBy};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{isError := NFisError}} -> S3#{isError => NFisError};
        {#{isError := PFisError}, _} -> S3#{isError => PFisError};
        _ -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_client.Commit'/3}).
'merge_msg_client.Commit'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{txId := NFtxId}} -> S1#{txId => NFtxId};
             {#{txId := PFtxId}, _} -> S1#{txId => PFtxId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{ballots := PFballots}, #{ballots := NFballots}} -> S2#{ballots => 'tr_merge_client.Commit.ballots'(PFballots, NFballots, TrUserData)};
        {_, #{ballots := NFballots}} -> S2#{ballots => NFballots};
        {#{ballots := PFballots}, _} -> S2#{ballots => PFballots};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_client.CommitReply'/3}).
'merge_msg_client.CommitReply'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{commit := NFcommit}} -> S1#{commit => NFcommit};
        {#{commit := PFcommit}, _} -> S1#{commit => PFcommit};
        _ -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_client.Release'/3}).
'merge_msg_client.Release'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{txId := NFtxId}} -> S1#{txId => NFtxId};
             {#{txId := PFtxId}, _} -> S1#{txId => PFtxId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{prevLeader := NFprevLeader}} -> S2#{prevLeader => NFprevLeader};
        {#{prevLeader := PFprevLeader}, _} -> S2#{prevLeader => PFprevLeader};
        _ -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_client.ClientPing'/3}).
'merge_msg_client.ClientPing'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{txId := NFtxId}} -> S1#{txId => NFtxId};
        {#{txId := PFtxId}, _} -> S1#{txId => PFtxId};
        _ -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_client.ClientPong'/3}).
'merge_msg_client.ClientPong'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,'merge_msg_client.Request'/3}).
'merge_msg_client.Request'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{seq := NFseq}} -> S1#{seq => NFseq};
             {#{seq := PFseq}, _} -> S1#{seq => PFseq};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{payload := {read, OPFpayload}}, #{payload := {read, ONFpayload}}} -> S2#{payload => {read, 'merge_msg_client.Read'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {update, OPFpayload}}, #{payload := {update, ONFpayload}}} -> S2#{payload => {update, 'merge_msg_client.Update'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {commit, OPFpayload}}, #{payload := {commit, ONFpayload}}} -> S2#{payload => {commit, 'merge_msg_client.Commit'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {release, OPFpayload}}, #{payload := {release, ONFpayload}}} -> S2#{payload => {release, 'merge_msg_client.Release'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {load, OPFpayload}}, #{payload := {load, ONFpayload}}} -> S2#{payload => {load, 'merge_msg_client.Load'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {ping, OPFpayload}}, #{payload := {ping, ONFpayload}}} -> S2#{payload => {ping, 'merge_msg_client.ClientPing'(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S2#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S2#{payload => PFpayload};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_client.Response'/3}).
'merge_msg_client.Response'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{seq := NFseq}} -> S1#{seq => NFseq};
             {#{seq := PFseq}, _} -> S1#{seq => PFseq};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{payload := {read, OPFpayload}}, #{payload := {read, ONFpayload}}} -> S2#{payload => {read, 'merge_msg_client.ReadReply'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {update, OPFpayload}}, #{payload := {update, ONFpayload}}} -> S2#{payload => {update, 'merge_msg_client.UpdateReply'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {commit, OPFpayload}}, #{payload := {commit, ONFpayload}}} -> S2#{payload => {commit, 'merge_msg_client.CommitReply'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {load, OPFpayload}}, #{payload := {load, ONFpayload}}} -> S2#{payload => {load, 'merge_msg_client.LoadReply'(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {pong, OPFpayload}}, #{payload := {pong, ONFpayload}}} -> S2#{payload => {pong, 'merge_msg_client.ClientPong'(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S2#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S2#{payload => PFpayload};
        {_, _} -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'client.Load' -> 'v_msg_client.Load'(Msg, [MsgName], TrUserData);
        'client.LoadReply' -> 'v_msg_client.LoadReply'(Msg, [MsgName], TrUserData);
        'client.Read' -> 'v_msg_client.Read'(Msg, [MsgName], TrUserData);
        'client.ReadReply' -> 'v_msg_client.ReadReply'(Msg, [MsgName], TrUserData);
        'client.Update' -> 'v_msg_client.Update'(Msg, [MsgName], TrUserData);
        'client.UpdateReply' -> 'v_msg_client.UpdateReply'(Msg, [MsgName], TrUserData);
        'client.Commit' -> 'v_msg_client.Commit'(Msg, [MsgName], TrUserData);
        'client.CommitReply' -> 'v_msg_client.CommitReply'(Msg, [MsgName], TrUserData);
        'client.Release' -> 'v_msg_client.Release'(Msg, [MsgName], TrUserData);
        'client.ClientPing' -> 'v_msg_client.ClientPing'(Msg, [MsgName], TrUserData);
        'client.ClientPong' -> 'v_msg_client.ClientPong'(Msg, [MsgName], TrUserData);
        'client.Request' -> 'v_msg_client.Request'(Msg, [MsgName], TrUserData);
        'client.Response' -> 'v_msg_client.Response'(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_client.Load'/3}).
-dialyzer({nowarn_function,'v_msg_client.Load'/3}).
'v_msg_client.Load'(#{} = M, Path, TrUserData) ->
    case M of
        #{startKey := F1} -> v_type_uint64(F1, [startKey | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{keyLimit := F2} -> v_type_uint64(F2, [keyLimit | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{value := F3} -> v_type_bytes(F3, [value | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (startKey) -> ok;
                      (keyLimit) -> ok;
                      (value) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Load'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Load'}, M, Path);
'v_msg_client.Load'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Load'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.LoadReply'/3}).
-dialyzer({nowarn_function,'v_msg_client.LoadReply'/3}).
'v_msg_client.LoadReply'(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
'v_msg_client.LoadReply'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.LoadReply'}, M, Path);
'v_msg_client.LoadReply'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.LoadReply'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Read'/3}).
-dialyzer({nowarn_function,'v_msg_client.Read'/3}).
'v_msg_client.Read'(#{} = M, Path, TrUserData) ->
    case M of
        #{prevLeader := F1} -> v_type_string(F1, [prevLeader | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{txId := F2} -> v_type_string(F2, [txId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timestamp := F3} -> v_type_uint64(F3, [timestamp | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{key := F4} -> v_type_bytes(F4, [key | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (prevLeader) -> ok;
                      (txId) -> ok;
                      (timestamp) -> ok;
                      (key) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Read'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Read'}, M, Path);
'v_msg_client.Read'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Read'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.ReadReply'/3}).
-dialyzer({nowarn_function,'v_msg_client.ReadReply'/3}).
'v_msg_client.ReadReply'(#{} = M, Path, TrUserData) ->
    case M of
        #{ballot := F1} -> v_type_uint32(F1, [ballot | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{servedBy := F2} -> v_type_string(F2, [servedBy | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{isError := F3} -> v_type_bool(F3, [isError | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{data := F4} -> v_type_bytes(F4, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (ballot) -> ok;
                      (servedBy) -> ok;
                      (isError) -> ok;
                      (data) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.ReadReply'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.ReadReply'}, M, Path);
'v_msg_client.ReadReply'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.ReadReply'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Update'/3}).
-dialyzer({nowarn_function,'v_msg_client.Update'/3}).
'v_msg_client.Update'(#{} = M, Path, TrUserData) ->
    case M of
        #{prevLeader := F1} -> v_type_string(F1, [prevLeader | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{txId := F2} -> v_type_string(F2, [txId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timestamp := F3} -> v_type_uint64(F3, [timestamp | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{key := F4} -> v_type_bytes(F4, [key | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{data := F5} -> v_type_bytes(F5, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (prevLeader) -> ok;
                      (txId) -> ok;
                      (timestamp) -> ok;
                      (key) -> ok;
                      (data) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Update'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Update'}, M, Path);
'v_msg_client.Update'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Update'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.UpdateReply'/3}).
-dialyzer({nowarn_function,'v_msg_client.UpdateReply'/3}).
'v_msg_client.UpdateReply'(#{} = M, Path, TrUserData) ->
    case M of
        #{ballot := F1} -> v_type_uint32(F1, [ballot | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{servedBy := F2} -> v_type_string(F2, [servedBy | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{isError := F3} -> v_type_bool(F3, [isError | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (ballot) -> ok;
                      (servedBy) -> ok;
                      (isError) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.UpdateReply'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.UpdateReply'}, M, Path);
'v_msg_client.UpdateReply'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.UpdateReply'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Commit'/3}).
-dialyzer({nowarn_function,'v_msg_client.Commit'/3}).
'v_msg_client.Commit'(#{} = M, Path, TrUserData) ->
    case M of
        #{txId := F1} -> v_type_string(F1, [txId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ballots := F2} -> 'v_map<uint32,uint32>'(F2, [ballots | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (txId) -> ok;
                      (ballots) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Commit'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Commit'}, M, Path);
'v_msg_client.Commit'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Commit'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.CommitReply'/3}).
-dialyzer({nowarn_function,'v_msg_client.CommitReply'/3}).
'v_msg_client.CommitReply'(#{} = M, Path, TrUserData) ->
    case M of
        #{commit := F1} -> v_type_bool(F1, [commit | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (commit) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.CommitReply'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.CommitReply'}, M, Path);
'v_msg_client.CommitReply'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.CommitReply'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Release'/3}).
-dialyzer({nowarn_function,'v_msg_client.Release'/3}).
'v_msg_client.Release'(#{} = M, Path, TrUserData) ->
    case M of
        #{txId := F1} -> v_type_string(F1, [txId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{prevLeader := F2} -> v_type_string(F2, [prevLeader | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (txId) -> ok;
                      (prevLeader) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Release'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Release'}, M, Path);
'v_msg_client.Release'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Release'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.ClientPing'/3}).
-dialyzer({nowarn_function,'v_msg_client.ClientPing'/3}).
'v_msg_client.ClientPing'(#{} = M, Path, TrUserData) ->
    case M of
        #{txId := F1} -> v_type_string(F1, [txId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (txId) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.ClientPing'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.ClientPing'}, M, Path);
'v_msg_client.ClientPing'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.ClientPing'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.ClientPong'/3}).
-dialyzer({nowarn_function,'v_msg_client.ClientPong'/3}).
'v_msg_client.ClientPong'(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
'v_msg_client.ClientPong'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.ClientPong'}, M, Path);
'v_msg_client.ClientPong'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.ClientPong'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Request'/3}).
-dialyzer({nowarn_function,'v_msg_client.Request'/3}).
'v_msg_client.Request'(#{} = M, Path, TrUserData) ->
    case M of
        #{seq := F1} -> v_type_uint32(F1, [seq | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := {read, OF2}} -> 'v_msg_client.Read'(OF2, [read, payload | Path], TrUserData);
        #{payload := {update, OF2}} -> 'v_msg_client.Update'(OF2, [update, payload | Path], TrUserData);
        #{payload := {commit, OF2}} -> 'v_msg_client.Commit'(OF2, [commit, payload | Path], TrUserData);
        #{payload := {release, OF2}} -> 'v_msg_client.Release'(OF2, [release, payload | Path], TrUserData);
        #{payload := {load, OF2}} -> 'v_msg_client.Load'(OF2, [load, payload | Path], TrUserData);
        #{payload := {ping, OF2}} -> 'v_msg_client.ClientPing'(OF2, [ping, payload | Path], TrUserData);
        #{payload := F2} -> mk_type_error(invalid_oneof, F2, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (seq) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Request'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Request'}, M, Path);
'v_msg_client.Request'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Request'}, X, Path).

-compile({nowarn_unused_function,'v_msg_client.Response'/3}).
-dialyzer({nowarn_function,'v_msg_client.Response'/3}).
'v_msg_client.Response'(#{} = M, Path, TrUserData) ->
    case M of
        #{seq := F1} -> v_type_uint32(F1, [seq | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := {read, OF2}} -> 'v_msg_client.ReadReply'(OF2, [read, payload | Path], TrUserData);
        #{payload := {update, OF2}} -> 'v_msg_client.UpdateReply'(OF2, [update, payload | Path], TrUserData);
        #{payload := {commit, OF2}} -> 'v_msg_client.CommitReply'(OF2, [commit, payload | Path], TrUserData);
        #{payload := {load, OF2}} -> 'v_msg_client.LoadReply'(OF2, [load, payload | Path], TrUserData);
        #{payload := {pong, OF2}} -> 'v_msg_client.ClientPong'(OF2, [pong, payload | Path], TrUserData);
        #{payload := F2} -> mk_type_error(invalid_oneof, F2, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (seq) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_client.Response'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'client.Response'}, M, Path);
'v_msg_client.Response'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'client.Response'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<uint32,uint32>'/3}).
-dialyzer({nowarn_function,'v_map<uint32,uint32>'/3}).
'v_map<uint32,uint32>'(M, Path, TrUserData) when is_map(M) ->
    [begin v_type_uint32(Key, [key | Path], TrUserData), v_type_uint32(Value, [value | Path], TrUserData) end || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<uint32,uint32>'(X, Path, _TrUserData) -> mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_client.Commit.ballots'/2}).
'tr_decode_init_default_client.Commit.ballots'(_, _) -> mt_empty_map_m().

-compile({inline,'tr_merge_client.Commit.ballots'/3}).
'tr_merge_client.Commit.ballots'(X1, X2, _) -> mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_client.Commit.ballots'/2}).
'tr_decode_repeated_finalize_client.Commit.ballots'(L, TrUserData) -> id(L, TrUserData).

-compile({inline,'tr_encode_client.Commit.ballots'/2}).
'tr_encode_client.Commit.ballots'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_client.Commit.ballots'/3}).
'tr_decode_repeated_add_elem_client.Commit.ballots'(Elem, L, _) -> mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_client.Commit.ballots[x]'/2}).
'tr_encode_client.Commit.ballots[x]'(X, _) -> mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) -> #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).






gpb_version_as_string() ->
    "4.19.1".

gpb_version_as_list() ->
    [4,19,1].

gpb_version_source() ->
    "git".
