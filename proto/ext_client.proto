syntax = "proto3";
package client;

message Load {
    uint64 startKey = 1;
    uint64 keyLimit = 2;
    bytes value = 3;
}

message LoadReply {}

message Read {
    // If empty, this is the first request at the partition
    optional string prevLeader = 1;
    string txId = 2;
    uint64 timestamp = 3;
    bytes key = 4;
}

message ReadReply {
    uint32 ballot = 1;
    string servedBy = 2;
    bool isError = 3;
    bytes data = 4;
    // Only used between peers
    optional string txId = 5;
}

message ReadBatch {
    message Piece {
        optional string prevLeader = 1;
        repeated bytes keys = 2;
    }

    string txId = 1;
    uint64 timestamp = 2;
    map<uint32, Piece> pieces = 4;
}

message ReadBatchReply {
    message Piece {
        uint32 ballot = 1;
        string servedBy = 2;
        // Same order as keys in ReadBatch.Piece.Keys
        repeated bytes values = 3;
    }

    // If empty, this signifies an error
    map<uint32, Piece> payload = 1;
}

message Update {
    // If empty, this is the first request at the partition
    optional string prevLeader = 1;
    string txId = 2;
    uint64 timestamp = 3;
    bytes key = 4;
    oneof operation {
        bytes data = 5;

        // Signed operations
        int32 signedIncr = 6;
        int64 signedIncr64 = 7;
        double floatIncr = 8;

        // Unsigned add
        uint32 unsignedIncr = 9;
        uint64 unsignedIncr64 = 10;

        // Unsigned decrement
        uint32 unsignedDecr = 11;
        uint64 unsignedDecr64 = 12;
    }
}

message UpdateReply {
    uint32 ballot = 1;
    string servedBy = 2;
    bool isError = 3;
    // Only used between peers
    optional string txId = 4;
}

message Commit {
    string txId = 1;
    map<uint32, uint32> ballots = 2;
    uint64 timestamp = 3;
    // Only used in Spanner.
    // Client has no knowledge of the commit protocol to be
    // used, so this field is not marked as optional. From
    // their point of view, this is superfluous information.
    uint32 coordPartition = 4;
}

message CommitReply {
    bool commit = 1;
}

message Release {
    string txId = 1;
    repeated uint32 partitions = 2;
}

message ClientPing {
    string txId = 1;
}

message ClientPong {}

message Request {
    uint32 seq = 1;
    oneof payload {
        Read read = 2;
        Update update = 3;
        Commit commit = 4;
        Release release = 5;
        Load load = 6;
        ClientPing ping = 7;
        ReadBatch readBatch = 9;
    }
}

message Response {
    uint32 seq = 1;
    oneof payload {
        ReadReply read = 2;
        UpdateReply update = 3;
        CommitReply commit = 4;
        LoadReply load = 5;
        ClientPong pong = 6;
        ReadBatchReply readBatch = 7;
    }
}
